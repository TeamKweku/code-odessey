// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  full_name,
  email
) VALUES (
  $1, $2, $3, $4
) RETURNING id, username, hashed_password, full_name, email, is_email_verified, password_changed_at, created_at, updated_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, hashed_password, full_name, email, is_email_verified, password_changed_at, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
  username = COALESCE($1, username),
  full_name = COALESCE($2, full_name),
  email = COALESCE($3, email),
  is_email_verified = COALESCE($4, is_email_verified),
  hashed_password = COALESCE($5, hashed_password),
  password_changed_at = COALESCE($6, password_changed_at)
WHERE 
  id = $7
RETURNING id, username, hashed_password, full_name, email, is_email_verified, password_changed_at, created_at, updated_at
`

type UpdateUserParams struct {
	Username          pgtype.Text      `json:"username"`
	FullName          pgtype.Text      `json:"full_name"`
	Email             pgtype.Text      `json:"email"`
	IsEmailVerified   pgtype.Bool      `json:"is_email_verified"`
	HashedPassword    pgtype.Text      `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamp `json:"password_changed_at"`
	ID                uuid.UUID        `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.IsEmailVerified,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

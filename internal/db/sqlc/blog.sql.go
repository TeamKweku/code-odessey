// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: blog.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBlog = `-- name: CreateBlog :one
INSERT INTO blogs (
  title,
  slug,
  description,
  body,
  banner_image
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, title, slug, description, body, banner_image, created_at, updated_at
`

type CreateBlogParams struct {
	Title       string `json:"title"`
	Slug        string `json:"slug"`
	Description string `json:"description"`
	Body        string `json:"body"`
	BannerImage string `json:"banner_image"`
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRow(ctx, createBlog,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.Body,
		arg.BannerImage,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.Body,
		&i.BannerImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBlog = `-- name: DeleteBlog :exec
DELETE FROM blogs
WHERE id = $1
`

func (q *Queries) DeleteBlog(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBlog, id)
	return err
}

const getBlog = `-- name: GetBlog :one
SELECT id, title, slug, description, body, banner_image, created_at, updated_at FROM blogs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBlog(ctx context.Context, id uuid.UUID) (Blog, error) {
	row := q.db.QueryRow(ctx, getBlog, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.Body,
		&i.BannerImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBlogBySlug = `-- name: GetBlogBySlug :one
SELECT id, title, slug, description, body, banner_image, created_at, updated_at FROM blogs
WHERE slug = $1 LIMIT 1
`

func (q *Queries) GetBlogBySlug(ctx context.Context, slug string) (Blog, error) {
	row := q.db.QueryRow(ctx, getBlogBySlug, slug)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.Body,
		&i.BannerImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBlogs = `-- name: ListBlogs :many
SELECT id, title, slug, description, body, banner_image, created_at, updated_at FROM blogs
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListBlogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBlogs(ctx context.Context, arg ListBlogsParams) ([]Blog, error) {
	rows, err := q.db.Query(ctx, listBlogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Description,
			&i.Body,
			&i.BannerImage,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlog = `-- name: UpdateBlog :one
UPDATE blogs
SET
  title = $2,
  slug = $3,
  description = $4,
  body = $5,
  banner_image = $6,
  updated_at = $7
WHERE id = $1
RETURNING id, title, slug, description, body, banner_image, created_at, updated_at
`

type UpdateBlogParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Slug        string    `json:"slug"`
	Description string    `json:"description"`
	Body        string    `json:"body"`
	BannerImage string    `json:"banner_image"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) (Blog, error) {
	row := q.db.QueryRow(ctx, updateBlog,
		arg.ID,
		arg.Title,
		arg.Slug,
		arg.Description,
		arg.Body,
		arg.BannerImage,
		arg.UpdatedAt,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Description,
		&i.Body,
		&i.BannerImage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

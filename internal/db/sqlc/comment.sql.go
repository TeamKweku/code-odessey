// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comment.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgconn"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  blog_id,
  user_id,
  body
) VALUES (
  $1, $2, $3
) RETURNING id, blog_id, body, created_at, updated_at, user_id
`

type CreateCommentParams struct {
	BlogID uuid.UUID `json:"blog_id"`
	UserID uuid.UUID `json:"user_id"`
	Body   string    `json:"body"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, createComment, arg.BlogID, arg.UserID, arg.Body)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.BlogID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteComment, id)
	return err
}

const deleteCommentByBlogID = `-- name: DeleteCommentByBlogID :exec
DELETE FROM comments
WHERE id = $1 AND blog_id = $2
`

type DeleteCommentByBlogIDParams struct {
	ID     uuid.UUID `json:"id"`
	BlogID uuid.UUID `json:"blog_id"`
}

func (q *Queries) DeleteCommentByBlogID(ctx context.Context, arg DeleteCommentByBlogIDParams) error {
	_, err := q.db.Exec(ctx, deleteCommentByBlogID, arg.ID, arg.BlogID)
	return err
}

const deleteCommentsByBlog = `-- name: DeleteCommentsByBlog :execresult
DELETE FROM comments
WHERE blog_id = $1
`

func (q *Queries) DeleteCommentsByBlog(ctx context.Context, blogID uuid.UUID) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteCommentsByBlog, blogID)
}

const getComment = `-- name: GetComment :one
SELECT id, blog_id, body, created_at, updated_at, user_id FROM comments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id uuid.UUID) (Comment, error) {
	row := q.db.QueryRow(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.BlogID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const listCommentsByBlog = `-- name: ListCommentsByBlog :many
SELECT id, blog_id, body, created_at, updated_at, user_id FROM comments
WHERE blog_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListCommentsByBlogParams struct {
	BlogID uuid.UUID `json:"blog_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListCommentsByBlog(ctx context.Context, arg ListCommentsByBlogParams) ([]Comment, error) {
	rows, err := q.db.Query(ctx, listCommentsByBlog, arg.BlogID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.BlogID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET
  body = $2
WHERE id = $1
RETURNING id, blog_id, body, created_at, updated_at, user_id
`

type UpdateCommentParams struct {
	ID   uuid.UUID `json:"id"`
	Body string    `json:"body"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRow(ctx, updateComment, arg.ID, arg.Body)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.BlogID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const updateCommentByBlogID = `-- name: UpdateCommentByBlogID :one
UPDATE comments
SET body = $3
WHERE id = $1 AND blog_id = $2
RETURNING id, blog_id, body, created_at, updated_at, user_id
`

type UpdateCommentByBlogIDParams struct {
	ID     uuid.UUID `json:"id"`
	BlogID uuid.UUID `json:"blog_id"`
	Body   string    `json:"body"`
}

func (q *Queries) UpdateCommentByBlogID(ctx context.Context, arg UpdateCommentByBlogIDParams) (Comment, error) {
	row := q.db.QueryRow(ctx, updateCommentByBlogID, arg.ID, arg.BlogID, arg.Body)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.BlogID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

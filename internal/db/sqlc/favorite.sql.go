// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: favorite.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFavorite = `-- name: CreateFavorite :one
INSERT INTO favorites (
  id,
  blog_id,
  created_at,
  updated_at
) VALUES (
  $1, $2, $3, $4
) RETURNING id, blog_id, created_at, updated_at
`

type CreateFavoriteParams struct {
	ID        uuid.UUID `json:"id"`
	BlogID    uuid.UUID `json:"blog_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateFavorite(ctx context.Context, arg CreateFavoriteParams) (Favorite, error) {
	row := q.db.QueryRow(ctx, createFavorite,
		arg.ID,
		arg.BlogID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.BlogID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFavorite = `-- name: DeleteFavorite :exec
DELETE FROM favorites
WHERE id = $1
`

func (q *Queries) DeleteFavorite(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteFavorite, id)
	return err
}

const getFavorite = `-- name: GetFavorite :one
SELECT id, blog_id, created_at, updated_at FROM favorites
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFavorite(ctx context.Context, id uuid.UUID) (Favorite, error) {
	row := q.db.QueryRow(ctx, getFavorite, id)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.BlogID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFavoritesByBlog = `-- name: ListFavoritesByBlog :many
SELECT id, blog_id, created_at, updated_at FROM favorites
WHERE blog_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListFavoritesByBlogParams struct {
	BlogID uuid.UUID `json:"blog_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListFavoritesByBlog(ctx context.Context, arg ListFavoritesByBlogParams) ([]Favorite, error) {
	rows, err := q.db.Query(ctx, listFavoritesByBlog, arg.BlogID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Favorite
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(
			&i.ID,
			&i.BlogID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFavorite = `-- name: UpdateFavorite :one
UPDATE favorites
SET
  updated_at = $2
WHERE id = $1
RETURNING id, blog_id, created_at, updated_at
`

type UpdateFavoriteParams struct {
	ID        uuid.UUID `json:"id"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateFavorite(ctx context.Context, arg UpdateFavoriteParams) (Favorite, error) {
	row := q.db.QueryRow(ctx, updateFavorite, arg.ID, arg.UpdatedAt)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.BlogID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

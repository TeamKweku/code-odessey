syntax = "proto3";

package pb;


import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "rpc_create_user.proto";
import "rpc_login_user.proto";
import "rpc_update_user.proto";


option go_package = "github.com/TeamKweku/code_odessey/internal/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Code Odessey API";
    version: "1.2";
    contact: {
      name: "TeamKweku";
      url: "https://github.com/TeamKweku";
      email: "teamkweku@outlook.com";
    };
    license: {
      name: "GNU General Public License v3.0";
      url: "https://github.com/TeamKweku/code-odessey/blob/main/LICENSE";
    };
    extensions: {
      key: "x-api-status";
      value {string_value: "alpha"}
    }
  };
};


service CodeOdessey {
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
            post: "/v1/create_user"
            body: "*"
        };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "This API is used to create a new user";
            summary: "Create new user";
        };
  }

  rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
            patch: "/v1/update_user"
            body: "*"
        };
  }

  rpc LoginUser (LoginUserRequest) returns (LoginUserResponse) {
    option (google.api.http) = {
            post: "/v1/login_user"
            body: "*"
        };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Login a user and retrieveaccess and refresh tokens";
            summary: "Login user";
        };
  }
 
}